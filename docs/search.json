[
  {
    "objectID": "lab-10.html",
    "href": "lab-10.html",
    "title": "lab-10: Distances and the Border Zone",
    "section": "",
    "text": "# spatial data science\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(units)\n\nudunits database from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/units/share/udunits/udunits2.xml\n\n# Visualization\nlibrary(gghighlight)\nlibrary(ggrepel)\nlibrary(knitr)"
  },
  {
    "objectID": "lab-10.html#libraries",
    "href": "lab-10.html#libraries",
    "title": "lab-10: Distances and the Border Zone",
    "section": "",
    "text": "# spatial data science\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(units)\n\nudunits database from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/units/share/udunits/udunits2.xml\n\n# Visualization\nlibrary(gghighlight)\nlibrary(ggrepel)\nlibrary(knitr)"
  },
  {
    "objectID": "lab-10.html#question-1",
    "href": "lab-10.html#question-1",
    "title": "lab-10: Distances and the Border Zone",
    "section": "Question 1:",
    "text": "Question 1:\nFor this lab we need three (3) datasets.\n\nSpatial boundaries of continental USA states (1.1)\nBoundaries of Canada, Mexico and the United States (1.2)\nAll USA cites (1.3)\n\n\neqdc &lt;-'+proj=eqdc +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs'\n\nThis PROJ.4 string defines an Equidistant Conic projection with the following parameters:\n+proj=eqdc → Equidistant Conic projection\n+lat_0=40 → Latitude of the projection’s center (40°N)\n+lon_0=-96 → Central meridian (96°W)\n+lat_1=20 → First standard parallel (20°N)\n+lat_2=60 → Second standard parallel (60°N)\n+x_0=0 → False easting (0 meters)\n+y_0=0 → False northing (0 meters)\n+datum=NAD83 → Uses the North American Datum 1983 (NAD83)\n+units=m → Units are in meters\n+no_defs → No additional default parameters from PROJ’s database\nThis projection is commonly used for mapping large areas with an east-west extent, especially in North America, as it balances distortion well between the two standard parallels.\n\n1.2 - Get USA state boundaries\nIn R, USA boundaries are stored in the AOI package. In case this package and data are not installed:\naoi_get(state = ‘conus’)\n\nlibrary(AOI)\n\nboundaries_data&lt;-remotes::install_github(\"mikejohnson51/AOI\", force=TRUE)\n\nUsing GitHub PAT from the git credential store.\n\n\nDownloading GitHub repo mikejohnson51/AOI@HEAD\n\n\nscales (1.3.0 -&gt; 1.4.0) [CRAN]\n\n\nInstalling 1 packages: scales\n\n\n\nThe downloaded binary packages are in\n    /var/folders/95/7bppnrhs19z4vp_sdb0lv9zr0000gn/T//RtmpzmHC86/downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file ‘/private/var/folders/95/7bppnrhs19z4vp_sdb0lv9zr0000gn/T/RtmpzmHC86/remotes156f17b7dfa6/mikejohnson51-AOI-f821d49/DESCRIPTION’ ... OK\n* preparing ‘AOI’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‘AOI_0.3.0.tar.gz’\n\nUS_boundaries&lt;- data.frame(boundaries_data)\n\n\nremotes::install_github(\"ropensci/USAboundaries\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'USAboundaries' from a github remote, the SHA1 (0f56f492) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nremotes::install_github(\"ropensci/USAboundariesData\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'USAboundariesData' from a github remote, the SHA1 (064cdbcb) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\nstates &lt;- aoi_get(state = \"conus\")\n\nstates_proj &lt;- st_transform(states, crs = eqdc)\n\n\n\n1.3 - Get country boundaries for Mexico, the United States of America, and Canada\nIn R, country boundaries are stored in the AOI package.\n\nCountry boundaries can be accessed with aoi_get(country = c(\"MX\", \"CA\", \"USA\")).\nMake sure the data is in a projected coordinate system suitable for distance measurements at the national scale (eqdc).\n\n\ncountry_boundaries&lt;-aoi_get(country=c(\"MX\", \"CA\", \"USA\"))\n\ncountries_proj &lt;- st_transform(country_boundaries, crs = eqdc)\n\n\n\n1.4 - Get city locations from the CSV file\nThe process of finding, downloading and accessing data is the first step of every analysis. Here we will go through these steps (minus finding the data).\nWhile this data has everything we want, it is not yet spatial. Convert the data.frame to a spatial object using st_as_sf and prescribing the coordinate variables and CRS (Hint what projection are the raw coordinates in?)\nFinally, remove cities in states not wanted and make sure the data is in a projected coordinate system suitable for distance measurements at the national scale:\nCongratulations! You now have three real-world, large datasets ready for analysis.\n\nlibrary(here)\n\nhere() starts at /Users/eleanor/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Eleanor MacBook Pro/ESS330-Quantitative-Reasoning/github/Lab-10\n\nuscities&lt;-readr::read_csv(here(\"data/uscities.csv\"))\n\nRows: 31254 Columns: 17\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): city, city_ascii, state_id, state_name, county_fips, county_name, s...\ndbl (6): lat, lng, population, density, ranking, id\nlgl (2): military, incorporated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuscities &lt;- st_as_sf(uscities, coords = c(\"lng\", \"lat\"), crs = 4326)\n\nuscities_proj &lt;- st_transform(uscities, crs = eqdc)\n\ncities_filtered &lt;- st_join(uscities_proj, states_proj, join = st_within) %&gt;% \n  filter(!(state_id %in% c(\"HI\", \"AK\", \"PR\")))"
  },
  {
    "objectID": "lab-10.html#question-2",
    "href": "lab-10.html#question-2",
    "title": "lab-10: Distances and the Border Zone",
    "section": "Question 2:",
    "text": "Question 2:\nHere we will focus on calculating the distance of each USA city to (1) the national border (2) the nearest state border (3) the Mexican border and (4) the Canadian border. You will need to manipulate you existing spatial geometries to do this using either st_union or st_combine depending on the situation. In all cases, since we are after distances to borders, we will need to cast (st_cast) our MULTIPPOLYGON geometries to MULTILINESTRING geometries. To perform these distance calculations we will use st_distance().\n\n2.1 - Distance to USA Border (coastline or national) (km)\nFor 2.2 we are interested in calculating the distance of each USA city to the USA border (coastline or national border). To do this we need all states to act as single unit. Convert the USA state boundaries to a MULTILINESTRING geometry in which the state boundaries are resolved. Please do this starting with the states object and NOT with a filtered country object. In addition to storing this distance data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.\n\nus_border &lt;- states_proj %&gt;%\n  st_union() %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ndist_matrix &lt;- st_distance(cities_filtered, us_border)\n\ncities_filtered$dist_us_border_km &lt;- as.numeric(dist_matrix[, 1]) / 1000\n\n\nus_border_table &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_us_border_km)) %&gt;%\n  select(city = city, state = state_id, dist_us_border_km) %&gt;%\n  slice_head(n = 5)%&gt;%\n  st_drop_geometry()%&gt;%\n  mutate(dist_us_border_km = paste0(round(dist_us_border_km, 1), \" km\"))\n\n\nflextable::flextable(us_border_table)\n\ncitystatedist_us_border_kmMinneapolisKS1084.3 kmAdaKS1084.1 kmBarnardKS1083.7 kmManchesterKS1080.2 kmTalmageKS1080 km\n\n\n\n\n2.2 - Distance to States (km)\nFor 2.1 we are interested in calculating the distance of each city to the nearest state boundary. To do this we need all states to act as single unit. Convert the USA state boundaries to a MULTILINESTRING geometry in which the state boundaries are preserved (not resolved). In addition to storing this distance data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.\n\nstate_borders &lt;- states_proj %&gt;%\n  st_combine() %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ndist_matrix_state &lt;- st_distance(cities_filtered, state_borders)\n\ncities_filtered &lt;- cities_filtered %&gt;%\n  mutate(dist_state_border_km = as.numeric(dist_matrix_state[, 1]) / 1000)\n\nstate_border_table &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_state_border_km)) %&gt;%\n  select(city = city, state = state_id, dist_state_border_km) %&gt;%\n  slice_head(n = 5)%&gt;%\n  st_drop_geometry()%&gt;%\n  mutate(dist_state_border_km = paste0(round(dist_state_border_km, 1), \" km\"))\n\n\nflextable::flextable(state_border_table)\n\ncitystatedist_state_border_kmBriggsTX314.8 kmLampasasTX308.9 kmFlorenceTX304.1 kmSaladoTX302.8 kmKempnerTX302.5 km\n\n\n\n\n2.3 - Distance to Mexico (km)\nFor 2.3 we are interested in calculating the distance of each city to the Mexican border. To do this we need to isolate Mexico from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.\n\nmexico_border &lt;- countries_proj %&gt;%\n  filter(admin == \"Mexico\") %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ndist_matrix_mexico &lt;- st_distance(cities_filtered, mexico_border)\n\ncities_filtered &lt;- cities_filtered %&gt;%\n  mutate(dist_mexico_km = as.numeric(dist_matrix_mexico[, 1]) / 1000)\n\nmexico_table &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_mexico_km)) %&gt;%\n  select(city = city, state = state_id, dist_mexico_km) %&gt;%\n  slice_head(n = 5)%&gt;%\n  st_drop_geometry()%&gt;%\n  mutate(dist_mexico_km = paste0(round(dist_mexico_km, 1), \" km\"))\n\nflextable::flextable(mexico_table)\n\ncitystatedist_mexico_kmGrand IsleME3282.8 kmCaribouME3250.3 kmPresque IsleME3234.6 kmOakfieldME3175.6 kmIsland FallsME3162.3 km\n\n\n\n\n2.4 - Distance to Canada (km)\nFor 2.4 we are interested in calculating the distance of each city to the Canadian border. To do this we need to isolate Canada from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.\n\ncanada_border &lt;- countries_proj %&gt;%\n  filter(admin == \"Canada\") %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ndist_matrix_canada &lt;- st_distance(cities_filtered, canada_border)\n\ncities_filtered &lt;- cities_filtered %&gt;%\n  mutate(dist_canada_km = as.numeric(dist_matrix_canada[, 1]) / 1000)\n\ncanada_table &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_canada_km)) %&gt;%\n  select(city = city, state = state_id, dist_canada_km) %&gt;%\n  slice_head(n = 5)%&gt;%\n  st_drop_geometry()%&gt;%\n  mutate(dist_canada_km = paste0(round(dist_canada_km, 1), \" km\"))\n\nflextable::flextable(canada_table)\n\ncitystatedist_canada_kmGuadalupe GuerraTX2206.5 kmSandovalTX2205.6 kmFrontonTX2204.8 kmFronton RanchettesTX2202.1 kmEvergreenTX2202 km"
  },
  {
    "objectID": "lab-10.html#question-3",
    "href": "lab-10.html#question-3",
    "title": "lab-10: Distances and the Border Zone",
    "section": "Question 3:",
    "text": "Question 3:\nIn this section we will focus on visualizing the distance data you calculated above. You will be using ggplot to make your maps, ggrepl to label significant features, and gghighlight to emphasize important criteria.\n\n3.1 Data\nShow the 3 countries, CONUS outline, state boundaries, and 10 largest USA cities (by population) on a single map\nUse geom_sf to plot your layers Use lty to change the line type and size to change line width Use ggrepel::geom_label_repel to label your cities\n\n# Top 10 most populous cities\ntop10_cities &lt;- cities_filtered %&gt;%\n  arrange(desc(population)) %&gt;%\n  slice_head(n = 10)\n\nggplot() +\n  geom_sf(data = countries_proj, fill = \"grey90\", color = \"black\", lty = 1) +\n  geom_sf(data = states_proj, fill = NA, color = \"darkslategray\", lty = 2, size = 0.5) +\n  geom_sf(data = st_union(states_proj), fill = NA, color = \"black\", size = 0.7) +\n  geom_sf(data = top10_cities, color = \"red\", size = 2) +\n  ggrepel::geom_label_repel(\n    data = top10_cities,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n3.2 City Distance from the Border\nCreate a map that colors USA cities by their distance from the national border. In addition, re-draw and label the 5 cities that are farthest from the border.\n\ntop5_us_border &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_us_border_km)) %&gt;%\n  slice_head(n = 5)\n\nggplot() +\n  geom_sf(data = states_proj, fill = NA, color = \"grey60\") +\n  geom_sf(data = cities_filtered, aes(color = dist_us_border_km), size = 1) +\n  scale_color_viridis_c(name = \"Distance to US Border (km)\") +\n  geom_sf(data = top5_us_border, color = \"red\", size = 2) +\n  ggrepel::geom_label_repel(\n    data = top5_us_border,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n3.3 City Distance from Nearest State\nCreate a map that colors USA cities by their distance from the nearest state border. In addition, re-draw and label the 5 cities that are farthest from any border.\n\ntop5_state_border &lt;- cities_filtered %&gt;%\n  arrange(desc(dist_state_border_km)) %&gt;%\n  slice_head(n = 5)\n\nggplot() +\n  geom_sf(data = states_proj, fill = NA, color = \"grey60\") +\n  geom_sf(data = cities_filtered, aes(color = dist_state_border_km), size = 1) +\n  scale_color_viridis_c(name = \"Distance to State Border (km)\") +\n  geom_sf(data = top5_state_border, color = \"blue\", size = 2) +\n  ggrepel::geom_label_repel(\n    data = top5_state_border,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n3.4 Equidistance boundary from Mexico and Canada\nHere we provide a little more challenge. Use gghighlight to identify the cities that are equal distance from the Canadian AND Mexican border 100 km.\nIn addition, label the five (5) most populous cites in this zone.\nHint: (create a new variable that finds the absolute difference between the distance to Mexico and the distance to Canada)\n\n# Create absolute difference column\ncities_filtered &lt;- cities_filtered %&gt;%\n  mutate(abs_diff_can_mex = abs(dist_mexico_km - dist_canada_km))\n\n# Filter cities within ±100 km of equidistance\nequidistant_cities &lt;- cities_filtered %&gt;%\n  filter(abs_diff_can_mex &lt;= 100)\n\n# Get 5 most populous equidistant cities\ntop5_eqdist &lt;- equidistant_cities %&gt;%\n  arrange(desc(population)) %&gt;%\n  slice_head(n = 5)\n\nggplot() +\n  geom_sf(data = states_proj, fill = NA, color = \"grey70\") +\n  geom_sf(data = cities_filtered, color = \"lightgrey\", size = 0.5) +\n  geom_sf(data = equidistant_cities, aes(color = abs_diff_can_mex), size = 1) +\n  scale_color_viridis_c(name = \"|Canada - Mexico| Distance (km)\") +\n  gghighlight(abs_diff_can_mex &lt;= 100, use_direct_label = FALSE) +\n  ggrepel::geom_label_repel(\n    data = top5_eqdist,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3\n  ) +\n  theme_minimal()\n\nWarning: Could not calculate the predicate for layer 1; ignored"
  },
  {
    "objectID": "lab-10.html#question-4",
    "href": "lab-10.html#question-4",
    "title": "lab-10: Distances and the Border Zone",
    "section": "Question 4:",
    "text": "Question 4:\nReal World Application Recently, Federal Agencies have claimed basic constitutional rights protected by the Fourth Amendment (protecting Americans from random and arbitrary stops and searches) do not apply fully at our borders (see Portland). For example, federal authorities do not need a warrant or suspicion of wrongdoing to justify conducting what courts have called a “routine search,” such as searching luggage or a vehicle. Specifically, federal regulations give U.S. Customs and Border Protection (CBP) authority to operate within 100 miles of any U.S. “external boundary”. Further information can be found at this ACLU article.\n\n4.1 Quantifing Border Zone\nHow many cities are in this 100 mile zone? (100 miles ~ 160 kilometers) How many people live in a city within 100 miles of the border? What percentage of the total population is in this zone? Does it match the ACLU estimate in the link above? Report this information as a table.\n\ncities_in_border_zone &lt;- cities_filtered %&gt;%\n  filter(dist_us_border_km &lt;= 160)\n\nnum_cities_in_border_zone &lt;- nrow(cities_in_border_zone)\n\ntotal_population_border_zone &lt;- sum(cities_in_border_zone$population)\n\ntotal_population_all_cities &lt;- sum(cities_filtered$population)\n\npercent_population_in_border_zone &lt;- (total_population_border_zone / total_population_all_cities) * 100\n\nborder_zone_table &lt;- data.frame(\n  \"Number of Cities in Zone\" = num_cities_in_border_zone,\n  \"Total\")\n\nborder_zone_table\n\n  Number.of.Cities.in.Zone X.Total.\n1                     9813    Total\n\n\n\n\n4.2 Mapping Border Zone\nMake a map highlighting the cites within the 100 mile zone using gghighlight. Use a color gradient from ‘orange’ to ‘darkred’. Label the 10 most populous cities in the Danger Zone\n\ntop10_border_zone &lt;- cities_in_border_zone %&gt;%\n  arrange(desc(population)) %&gt;%\n  slice_head(n = 10)\n\nggplot() +\n  geom_sf(data = states_proj, fill = NA, color = \"gray80\", size = 0.4) +\n  geom_sf(data = cities_in_border_zone, aes(color = dist_us_border_km), size = 1) +\n  scale_color_gradient(low = \"orange\", high = \"darkred\", name = \"Dist to Border (km)\") +\n  ggrepel::geom_label_repel(\n    data = top10_border_zone,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3,\n    box.padding = 0.3,\n    max.overlaps = Inf\n  ) +\n  labs(title = \"Cities Within 100-Mile Border Zone\",\n       subtitle = \"Top 10 most populous cities highlighted\",\n       caption = \"Distance from national border (km)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n4.3 : Instead of labeling the 10 most populous cites, label the most populous city in each state within the Danger Zone.\n\nmost_populous_per_state &lt;- cities_in_border_zone %&gt;%\n  group_by(state_id) %&gt;%\n  slice_max(order_by = population, n = 1, with_ties = FALSE) %&gt;%\n  ungroup()\n\nggplot() +\n  geom_sf(data = states_proj, fill = NA, color = \"gray70\", size = 0.4) +\n  geom_sf(data = cities_in_border_zone, aes(color = dist_us_border_km), size = 1) +\n  scale_color_gradient(low = \"orange\", high = \"darkred\", name = \"Dist to Border (km)\") +\n  ggrepel::geom_label_repel(\n    data = most_populous_per_state,\n    aes(geometry = geometry, label = city),\n    stat = \"sf_coordinates\",\n    size = 3,\n    box.padding = 0.3,\n    max.overlaps = Inf\n  ) +\n  labs(title = \"Most Populous City per State Within 100-Mile Border Zone\",\n       caption = \"Cities colored by distance to border (km)\") +\n  theme_minimal()"
  }
]